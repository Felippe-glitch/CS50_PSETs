sort1 uses: Bubble Sort

How do you know?:

- random5000: 0,08s
- random10000: 0,212s
- random50000: 6,142s


- reversed5000: 0,085s
- reversed10000: 0,354s
- reversed 7,453s


- sorted5000: 0,031s
- sorted10000: 0,082s
- sorted50000: 1,022s

No melhor dos casos (sorted), o algoritmo sort1, superou o Merger Sort (sort2) em um teste, apesar de n√£o superar o em nenhum outro caso. Isso se deve ao O(n) do Bubble Sort no melhor dos casos.

sort2 uses: Merge Sort

How do you know?

- random5000: 0,036s
- random10000: 0,054s
- random50000: 1,376s


- reversed5000: 0,037s
- reversed10000: 0,057s
- reversed50000: 0,996s


- sorted5000: 0,037s
- sorted10000: 0,065s
- sorted50000: 0,844s

When analyzing the worst-case execution times (reversed), it is concluded that the fastest algorithm is Merge Sort, as it was the quickest in all tests.


sort3 uses: Selection Sort

How do you know?:

- random5000: 0,045s
- random10000: 0,129s
- random50000: 3,878s


- reversed5000: 0,053s
- reversed10000: 0,145s
- reversed50000: 3,041s


- sorted5000: 0,056s
- sorted10000: 0,133s
- sorted50000: 4,087s

It was the slowest algorithm in all test cases.
